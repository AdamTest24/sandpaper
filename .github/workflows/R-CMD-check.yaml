on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: R-CMD-check

jobs:
  R-CMD-check:
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}


    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release', cache: '~/Library/Application Support/renv', cov: 'true'}
          - {os: windows-latest, r: 'release', cache: '~\AppData\Local\renv
'}
          - {os: ubuntu-18.04,   r: 'devel', cache: '~/.local/share/renv', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest", http-user-agent: "R/4.0.0 (ubuntu-18.04) R (4.0.0 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions" }
          - {os: ubuntu-18.04,   r: 'release', cache: '~/.local/share/renv', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: 'oldrel',  cache: '~/.local/share/renv', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: '3.5',     cache: '~/.local/share/renv', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}
          - {os: ubuntu-18.04,   r: '3.4',     cache: '~/.local/share/renv', rspm: "https://packagemanager.rstudio.com/cran/__linux__/bionic/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      RENV_PATHS_ROOT: ${{ matrix.config.cache }}

    steps:
      - name: Record Linux Version
        if: runner.os == 'Linux'
        run: echo "OS_VERSION=`lsb_release -sr`" >> $GITHUB_ENV
      
      - name: Checkout Package
        uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1
        with:
          pandoc-version: '2.11' 

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore package cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ env.OS_VERSION }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ env.OS_VERSION }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Restore {renv} cache
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ runner.os }}-${{ env.OS_VERSION }}-renv-${{ runner.r }}-${{ hashFiles('.github/workflows/R-CMD-check.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.OS_VERSION }}-renv-${{ runner.r }}-

      - name: Install macOS system dependencies
        if: runner.os == 'macOS'
        run: brew install libgit2

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(remotes::system_requirements("ubuntu", "18.04"), sep = "\n")')
          sudo apt install libgit2-dev libxslt1-dev

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      - name: Prime {renv} Cache
        if: runner.os != 'Windows'
        run: |
          renv::init()
          system('rm -rf renv .Rprofile')
          system('git clean -fd -e .github')
          system('git restore .')
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Checkout Lesson for Integration Test
        if: runner.os == 'macOS'
        uses: actions/checkout@v2
        with:
          repository: "carpentries/sandpaper-docs"
          path: ${{ github.workspace }}/sandpaper-docs 
          clean: false

      - name: Perform Integration Test
        if: runner.os == 'macOS'
        run: |
          remotes::install_local()
          stopifnot(
            "::warning ::Could not clone test lesson" = fs::dir_exists("sandpaper-docs")
          )
          cat("::group::Pre-built lesson tree")
          fs::dir_tree("sandpaper-docs")
          cat("::endgroup::")
          cat("::group::Managing Dependencies")
          sandpaper::manage_deps(file.path(getwd(), "sandpaper-docs"))
          cat("::endgroup::")
          cat("::group::Post-built lesson tree")
          sandpaper::build_lesson("sandpaper-docs", quiet = FALSE)
          stopifnot(
            "::error ::Markdown files not built" = fs::dir_exists("sandpaper-docs/site/built"),
            "::error ::HTML files not built" = fs::dir_exists("sandpaper-docs/site/docs")
          )
          fs::dir_tree("sandpaper-docs")
          cat("::endgroup::")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Cover
        if: matrix.config.cov == 'true'
        run: covr::codecov()
        shell: Rscript {0}
