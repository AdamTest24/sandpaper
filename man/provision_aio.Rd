% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_aio.R
\name{provision_aio}
\alias{provision_aio}
\title{Provision an AiO page}
\usage{
provision_aio(pkg, quiet)
}
\arguments{
\item{pkg}{an object created by {pkgdown}, supplied by \code{\link[=build_site]{build_site()}}.}

\item{quiet}{If \code{TRUE} then no messages will be shown when building.

This function will build the all-in-one page for the lesson website. Because
the bottleneck is often the internal processes of {pkgdown}, we are first
templating the AIO page as a blank page and then adding in the contents using
{xml2}.}
}
\value{
a list with three elements:
\itemize{
\item \emph{learner}: an \code{xml_document} containing the aio page from the learner view
\item \emph{instructor}: the corresponding \code{xml_document} from the instructor view
\item \emph{needs_episodes}: a logical flag if \code{TRUE}, indicates that the template
needs to be filled with episode content. If \code{FALSE}, content exists and
may need to be updated.
}
}
\description{
Provision an AiO page
}
\details{
There are two things to know about the AiO page:
\enumerate{
\item All content inside the page is recycled directly from the episode content
\item building a page via {pkgdown} is a relatively slow process due to
cross-linking procedures and larger pages take longer to build.
}

Because we know that we can always retrieve 1 from the other pages, it makes
more sense for us to build a template pkgdown page to fill in later because
the linking and highlighting has already been performed.

This will provision the AiO pages destructively. In the future, when we have
our caching mechanism for HTML pages and template content in place, we will
avoid making destructive changes and read in the AiO file if it exists.
}
\seealso{
build_aio
}
\keyword{internal}
