% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-store.R
\name{set_this_lesson}
\alias{set_this_lesson}
\alias{clear_this_lesson}
\alias{this_lesson}
\title{Internal cache for storing lesson objects}
\usage{
set_this_lesson(path)

clear_this_lesson()

this_lesson(path)
}
\arguments{
\item{path}{a path to the current lesson}
}
\description{
A storage cache for \link[pegboard:Lesson]{pegboard::Lesson} objects that works across the
functions while {sandpaper} is working.
}
\details{
\code{this_lesson()} will return a \link[pegboard:Lesson]{pegboard::Lesson} object if it has
previously been stored. There are three values that are cached:
\itemize{
\item \code{.this_lesson} a \link[pegboard:Lesson]{pegboard::Lesson} object
\item \code{.this_diff} a charcter vector from \code{\link[gert:git_diff]{gert::git_diff_patch()}}
\item \code{.this_status} a data frame from \code{\link[gert:git_commit]{gert::git_status()}}
}

The function \code{this_lesson()} first checks if \code{.this_diff} is different than
the output of \code{\link[gert:git_diff]{gert::git_diff_patch()}} and then check if there are any
changes to \code{\link[gert:git_commit]{gert::git_status()}}. If there are no differences or the values
are not previously cached, the lesson is loaded into memory.

If there have been no changes git is aware of, the lesson remains the same.
}
\examples{
tmp <- tempfile()
create_lesson(tmp, open = FALSE)
# Read the lesson into cache
system.time(sandpaper:::this_lesson(tmp)) 
system.time(sandpaper:::this_lesson(tmp)) # less time to read in once cached
l <- sandpaper:::this_lesson(tmp)
l
# clear the cache
sandpaper:::clear_this_lesson(tmp)
system.time(sandpaper:::this_lesson(tmp)) # have to re-read the lesson
system.time(sandpaper:::this_lesson(tmp)) 
unlink(tmp)
}
\keyword{internal}
