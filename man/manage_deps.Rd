% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/renv.R
\name{manage_deps}
\alias{manage_deps}
\title{Lesson Runtime Dependency Management}
\usage{
manage_deps(path = ".", profile = "packages", snapshot = TRUE)
}
\arguments{
\item{path}{path to the current project}

\item{profile}{the name of the new profile (default "packages")}

\item{snapshot}{if \code{TRUE}, packages from the cache are added to the lockfile
(default). Setting this to \code{FALSE} will add packages to the cache and not
snapshot them.}
}
\value{
if \code{snapshot = TRUE}, a nested list representing the lockfile will be
returned.
}
\description{
A customized provisioner for Carpentries Lessons based on
\pkg{renv} that will \emph{respect user environments}. This setup leads to
several advantages:
\itemize{
\item \strong{reliable setup}: the version of the lesson built on the carpentries
website will be the same as what you build on your computer because the
packages will be identical
\item \strong{environmentally friendly}: The lesson dependencies are NOT stored in
your default R library and they will not alter your R environment.
\item \strong{transparent}: any additions or deletions to the cache will be recorded
in the lockfile, which is tracked by git.
}
}
\details{
The \pkg{renv} package provides a very useful interface to bring one
aspect of reproducibility to R projects. Because people working on
Carpentries lessons are also working academics and will likely have
projects on their computer where the package versions are necessary for
their work, it's important that those environments are respected.

Our flavor of {renv} applies a package cache explicitly to the content of
the lesson, but does not impose itself as the default {renv} environment.

This provisioner will do the following steps:
\enumerate{
\item check if the profile has been created and create it if needed via
\code{\link[renv:init]{renv::init()}}
\item populate the cache with packages needed from the user's system and
download any that are missing via \code{\link[renv:hydrate]{renv::hydrate()}}. This includes all
new packages that have been added to the lesson.
\item If there is a lockfile already present, make sure the packages in the
cache are aligned with the lockfile (downloading sources if needed) via
\code{\link[renv:restore]{renv::restore()}}.
\item Record the state of the cache in a lockfile tracked by git. This will
include adding new packages and removing old packages. \code{\link[renv:snapshot]{renv::snapshot()}}
}

When the lockfile changes, you will see it in git and have the power to
either commit or restore those changes.
}
