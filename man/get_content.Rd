% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_aio.R
\name{get_content}
\alias{get_content}
\title{Get sections from an episode's HTML page}
\usage{
get_content(episode, pkg, aio = FALSE, instructor = FALSE)
}
\arguments{
\item{episode}{an object of class \code{xml_document}, a path to a markdown or
html file of an episode.}

\item{pkg}{an object created by {pkgdown}, supplied by \code{\link[=build_site]{build_site()}}.}

\item{aio}{if \code{TRUE}, the sections of the AiO page are returned named with
their IDs. Defaults to \code{FALSE}, which returns all contents within the main
div.}

\item{instructor}{if \code{TRUE}, the instructor version of the episode is read,
defaults to \code{FALSE}. This has no effect if the episode is an \code{xml_document}.}
}
\description{
Get sections from an episode's HTML page
}
\details{
The contents of the lesson are contained in the following templating cascade:\if{html}{\out{<div class="sourceCode html">}}\preformatted{<body>
  <div class='container'>
    <div class='row'>
      <div class='[...] primary-content'>
        <main>
          <div class='[...] lesson-content'>
            CONTENT HERE
}\if{html}{\out{</div>}}

This function will extract the content from the episode without the templating.
}
\examples{
if (FALSE) {
lsn <- "/path/to/lesson"
pkg <- pkgdown::as_pkgdown(fs::path(lsn, "site"))

# for AiO pages, this will return only sections:
get_content("aio", pkg, aio = TRUE)

# for episode pages, this will return everything that's not template
get_content("01-introduction", pkg)

}
}
\keyword{internal}
